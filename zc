#! /bin/bash

### Zeda Compiler
## zc
## Version 0.1
###

##Utilities

### Sinmple yes/no
yn() {
    v=""
    while [ "$v" == "" ]
    do
	echo -n "$1 [y\n]: "
	read v
	if [ "$v" == "y" ] || [ "$v" == "Y" ]; then
	    return 0
	elif [ "$v" == "n" ] || [ "v" == "N" ]; then
	    return 1
	else
	    echo "$v is not valid."
	    v=""
	fi
    done
}

### Checks the symlink to the Engine source by seeing if the "Readme" exists
checklinkEngineSrc() {
    if [ -f "$1/README.md" ]; then
	echo 0
	return
    else
	echo 1
	return
    fi
}


#Help
help() {
    printf "\n##########\n###  Zeda Compiler  \n##########\n\n  Usage:\n"
    printf "\tbuild-engine\tBuilds the Zeda Engine source\n"
    printf "\tbuild\t\tBuilds the current project\n"
    printf "\tcreate-lib\tAdd a lib to the current project\n"
    printf "\tnew-project\tStart a new project\n"
    printf "\timport-project\tImport a Zeda project\n"
    printf "\n"
    exit
}

#Check and verify source file
cv() {
    if [ -f $PWD/.zedarc ]; then
	source $PWD/.zedarc
    else
	echo "ERROR: No .zedarc in current directory."
	echo "To start a new project, use:\n"
	echo "  zc new-project \n\n"
	echo "To import a project, use:\n"
	echo "  zc import-oroject \n\n"
	exit
    fi
}

#Build the engine
build-engine() {
    echo 'build-engine'
}

#Build the current project
build-project() {
    printf "\n##########\n###  Zeda Compiler Build \n##########\n\n"
    cv
    INCLUDES="-I./include -I./Zeda/include/"
    LINK="-lz"
    LSOURCE="$(find . -name '*.cpp' -printf './%P ')"
    ESOURCE="$(find ./Zeda/ -name '*.cpp' -printf './Zeda/%P ')"
    g++ $LSOURCE $ESOURCE $INCLUDES $LINK -o "bin/$NAME"
    if [ "$?" != 0 ]; then
	echo "There were some errors during compilation."
	echo "Exit status: $?\n\n"
	exit "$?"
    fi
    printf "Compilation successful!\n"
    printf "  Output:\t$PWD/bin/$NAME\n\n"
    yn "Run $NAME? "
    if [ "$?" == 1 ]; then
       exit
    fi
    "$PWD/bin/$NAME"
    echo "$NAME exit code: $?"
    exit
}

#Create a new include
create-lib() {
    echo -n "Name of the new library: "
    read name;
    echo "Creating $name.h in include/$name"
    mkdir -vp "./include/$name"
    cat <<EOF > "./include/$name/$name.h"
I am the h file
EOF
    echo "Creating $name.cpp in src/$name"
    mkdir -vp "./src/$name"
    cat <<EOF > "./src/$name/$name.cpp"
I am the cpp file
EOF
}

#Start a new project
new-project() {
    if [ -f $PWD/.zedarc ]; then
	printf "WARNING:  zedarc exists.\nA project potentially exists here.\n"
	yn "Continue creating a new project?"
	if [ "$?" == 1 ]; then
	    exit
	fi
    fi
    printf "\n##########\n###  Zeda Compiler New Project \n##########\n\n"
    name=""
    while [ "$name" == "" ]
    do
	read -ep "Name of project: " name
	if [ "$name" == "" ]; then
	    echo "Enter a valid name for the project."
	fi
    done;
    echo "Setting Project Name: $name"
    echo "NAME=$name" > ./.zedarc
    syml=""
    while [ "$syml" == "" ]
    do
	if [ "$ZEDASOURCE" != "" ]; then
	    read -ep "Use currently linked engine: $ZEDASOURCE [y/N]: " Proceed
            if echo $Proceed | grep -iq "^y"; then syml=$ZEDASOURCE; break; fi
	fi
	read -ep "Path to Zeda Source: " syml
	if [ "$syml" == "" ]; then
	    echo "Enter a valid symlink."
	fi
	if [ "$(checklinkEngineSrc $syml)" == "1" ]; then
	    echo "$syml does not point to the the Zeda Source."
	    syml=""
	fi
    done
    echo "Link to Zeda Source is: $syml"
    echo "ZEDASOURCE=$syml" >> ./.zedarc
    mkdir -vp bin
    mkdir -vp src
    mkdir -vp include
    mkdir -vp resources
    mkdir -vp assets
    ln -svf $syml $PWD/Zeda
    echo "# $name" > ./README.md
    printf "# Anything in the bin directory\nbin/\n#Don't include the Source Link\nZeda/\n#Or the .zedarc\n./.zedarc\n" > .gitignore
    git init
    git add .
    git commit -m "init"a
    printf "\nGit initialized, project started.  Add a mirror when ready.\n"
    printf "Project $name is ready to be started.\nTo begin, use \"zc build-engine\" to build the Zeda engine.\nTo build your project use: \"zc build\"\nStart editing your files in $PWD/src\n\n"
}

#Init Logic
case "$1" in
    "")
	help
	;;
    "build-engine")
	build-engine
	;;
    "build")
	build-project
	;;
    "create-lib")
	create-lib
	;;
    "new-project")
	new-project
	;;
    *)
	echo "$1 is not a valid command of $0"
	help
	;;
esac
